import React, { useState, useEffect } from 'react';
import WebtoonsGraphEditor from './WebtoonsGraphEditor';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface User {
  id: string;
  username: string;
  password: string; // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω—ã!
  createdDate: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–µ–∫—Ç–∞
interface Project {
  id: string;
  title: string;
  description: string;
  createdDate: string;
  modifiedDate: string;
  thumbnail?: string; // base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é
  nodes: any; // –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∞
  edges: any; // —Å–≤—è–∑–∏ –≥—Ä–∞—Ñ–∞
  images: any; // –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
  authorId: string; // ID –∞–≤—Ç–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
  authorName: string; // –ò–º—è –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —ç–∫—Ä–∞–Ω–∞ –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
function AuthScreen({ onLogin }: { onLogin: (user: User) => void }) {
  const [isLogin, setIsLogin] = useState(true);
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setError('');

    if (!username.trim() || !password.trim()) {
      setError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }

    const users: User[] = JSON.parse(localStorage.getItem('webtoon-users') || '[]');

    if (isLogin) {
      // –í—Ö–æ–¥
      const user = users.find(u => u.username === username && u.password === password);
      if (user) {
        onLogin(user);
      } else {
        setError('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
      }
    } else {
      // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
      if (users.some(u => u.username === username)) {
        setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        return;
      }

      const newUser: User = {
        id: `user-${Date.now()}`,
        username,
        password, // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —Ö–µ—à–∏—Ä–æ–≤–∞—Ç—å!
        createdDate: new Date().toISOString()
      };

      users.push(newUser);
      localStorage.setItem('webtoon-users', JSON.stringify(users));
      onLogin(newUser);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
      <div className="bg-white rounded-lg shadow-lg p-8 w-full max-w-md">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-800 mb-2">
            üé® Webtoon Gallery
          </h1>
          <p className="text-gray-600">
            {isLogin ? '–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç' : '–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç'}
          </p>
        </div>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            </label>
            <input
              type="text"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –ü–∞—Ä–æ–ª—å
            </label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
            />
          </div>

          {error && (
            <div className="text-red-600 text-sm bg-red-50 p-2 rounded">
              {error}
            </div>
          )}

          <button
            type="submit"
            className="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors font-semibold"
          >
            {isLogin ? '–í–æ–π—Ç–∏' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
          </button>
        </form>

        <div className="mt-6 text-center">
          <button
            onClick={() => {
              setIsLogin(!isLogin);
              setError('');
              setUsername('');
              setPassword('');
            }}
            className="text-blue-600 hover:text-blue-700 text-sm"
          >
            {isLogin 
              ? '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å' 
              : '–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π–¥–∏—Ç–µ'
            }
          </button>
        </div>

        <div className="mt-6 text-xs text-gray-500 text-center">
          ‚ö†Ô∏è –î–µ–º–æ-—Ä–µ–∂–∏–º: –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        </div>
      </div>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≥–∞–ª–µ—Ä–µ–∏
function Gallery({ projects, currentUser, onNewProject, onEditProject, onDeleteProject, onLogout }: {
  projects: Project[];
  currentUser: User;
  onNewProject: () => void;
  onEditProject: (project: Project) => void;
  onDeleteProject: (id: string) => void;
  onLogout: () => void;
}) {
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      <div className="container mx-auto px-4 py-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
        <div className="flex items-center justify-between mb-8">
          <div className="text-center flex-1">
            <h1 className="text-4xl font-bold text-gray-800 mb-4">
              üé® –ì–∞–ª–µ—Ä–µ—è –≤–µ–±-–∫–æ–º–∏–∫—Å–æ–≤
            </h1>
            <p className="text-lg text-gray-600 mb-6">
              –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–æ–º–∏–∫—Å–∞–º–∏
            </p>
            <button
              onClick={onNewProject}
              className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-semibold"
            >
              ‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–º–∏–∫—Å
            </button>
          </div>
          
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
          <div className="bg-white rounded-lg shadow-sm p-4 ml-8">
            <div className="text-sm text-gray-600 mb-2">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</div>
            <div className="font-semibold text-gray-800 mb-3">üë§ {currentUser.username}</div>
            <button
              onClick={onLogout}
              className="text-sm px-3 py-1 bg-gray-100 text-gray-700 rounded hover:bg-gray-200 transition-colors"
            >
              –í—ã–π—Ç–∏
            </button>
          </div>
        </div>

        {/* –°–µ—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {projects.map((project) => (
            <div
              key={project.id}
              className="bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow p-4"
            >
              {/* –ü—Ä–µ–≤—å—é */}
              <div className="w-full h-40 bg-gray-200 rounded-lg mb-3 flex items-center justify-center">
                {project.thumbnail ? (
                  <img
                    src={project.thumbnail}
                    alt={project.title}
                    className="w-full h-full object-cover rounded-lg"
                  />
                ) : (
                  <div className="text-gray-400 text-sm">–ù–µ—Ç –ø—Ä–µ–≤—å—é</div>
                )}
              </div>

              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ */}
              <h3 className="font-semibold text-gray-800 mb-1 truncate">
                {project.title}
              </h3>
              <p className="text-sm text-gray-600 mb-2 line-clamp-2">
                {project.description}
              </p>
              <div className="text-xs text-gray-500 mb-1">
                üë§ –ê–≤—Ç–æ—Ä: {project.authorName}
              </div>
              <p className="text-xs text-gray-500 mb-3">
                –ò–∑–º–µ–Ω–µ–Ω: {new Date(project.modifiedDate).toLocaleDateString()}
              </p>

              {/* –î–µ–π—Å—Ç–≤–∏—è */}
              <div className="flex gap-2">
                {project.authorId === currentUser.id ? (
                  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–≤—Ç–æ—Ä, –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å
                  <>
                    <button
                      onClick={() => onEditProject(project)}
                      className="flex-1 px-3 py-1 bg-blue-100 text-blue-700 rounded text-sm hover:bg-blue-200 transition-colors"
                    >
                      –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button
                      onClick={() => onDeleteProject(project.id)}
                      className="px-3 py-1 bg-red-100 text-red-700 rounded text-sm hover:bg-red-200 transition-colors"
                    >
                      üóëÔ∏è
                    </button>
                  </>
                ) : (
                  // –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä, —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä
                  <button
                    onClick={() => onEditProject(project)}
                    className="flex-1 px-3 py-1 bg-green-100 text-green-700 rounded text-sm hover:bg-green-200 transition-colors"
                  >
                    üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä
                  </button>
                )}
              </div>
            </div>
          ))}
        </div>

        {/* –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
        {projects.length === 0 && (
          <div className="text-center py-16">
            <div className="text-6xl mb-4">üé≠</div>
            <h3 className="text-xl font-semibold text-gray-700 mb-2">
              –ü–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–∏–∫—Å–æ–≤
            </h3>
            <p className="text-gray-500 mb-6">
              –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–º–∏–∫—Å!
            </p>
            <button
              onClick={onNewProject}
              className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-semibold"
            >
              –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ
            </button>
          </div>
        )}
      </div>
    </div>
  );
}

export default function App() {
  const [currentView, setCurrentView] = useState<'gallery' | 'editor'>('gallery');
  const [projects, setProjects] = useState<Project[]>([]);
  const [currentProject, setCurrentProject] = useState<Project | null>(null);
  const [user, setUser] = useState<User | null>(null);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const savedUser = localStorage.getItem('webtoon-current-user');
    if (savedUser) {
      try {
        setUser(JSON.parse(savedUser));
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      }
    }
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ localStorage –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  useEffect(() => {
    const savedProjects = localStorage.getItem('webtoon-projects');
    if (savedProjects) {
      try {
        setProjects(JSON.parse(savedProjects));
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:', error);
      }
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ localStorage
  const saveProjects = (updatedProjects: Project[]) => {
    setProjects(updatedProjects);
    localStorage.setItem('webtoon-projects', JSON.stringify(updatedProjects));
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
  const handleNewProject = () => {
    const newProject: Project = {
      id: `project-${Date.now()}`,
      title: '–ù–æ–≤—ã–π –∫–æ–º–∏–∫—Å',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∏–∫—Å–∞',
      createdDate: new Date().toISOString(),
      modifiedDate: new Date().toISOString(),
      nodes: {},
      edges: {},
      images: {},
      authorId: user?.id || 'guest', // –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º 'guest'
      authorName: user?.username || '–ì–æ—Å—Ç—å'
    };
    
    setCurrentProject(newProject);
    setCurrentView('editor');
  };

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
  const handleEditProject = (project: Project) => {
    setCurrentProject(project);
    setCurrentView('editor');
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å)
  const handleDeleteProject = (id: string) => {
    const project = projects.find(p => p.id === id);
    if (!project || !user) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–≤—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞
    if (project.authorId !== user.id) {
      alert('–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã!');
      return;
    }
    
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç?')) {
      const updatedProjects = projects.filter(p => p.id !== id);
      saveProjects(updatedProjects);
    }
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
  const handleSaveProject = (projectData: { nodes: any; edges: any; images: any; title?: string; description?: string; thumbnail?: string }) => {
    if (!currentProject) return;

    const updatedProject: Project = {
      ...currentProject,
      ...projectData,
      modifiedDate: new Date().toISOString()
    };

    const existingIndex = projects.findIndex(p => p.id === currentProject.id);
    let updatedProjects: Project[];

    if (existingIndex >= 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç
      updatedProjects = [...projects];
      updatedProjects[existingIndex] = updatedProject;
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
      updatedProjects = [...projects, updatedProject];
    }

    saveProjects(updatedProjects);
    setCurrentProject(updatedProject);
  };

  // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–∞–ª–µ—Ä–µ—é
  const handleBackToGallery = () => {
    setCurrentView('gallery');
    setCurrentProject(null);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleLogin = (loggedInUser: User) => {
    setUser(loggedInUser);
    localStorage.setItem('webtoon-current-user', JSON.stringify(loggedInUser));
    setCurrentView('gallery');
  };

  // –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
  const handleLogout = () => {
    setUser(null);
    localStorage.removeItem('webtoon-current-user');
    setCurrentView('gallery');
    setCurrentProject(null);
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (!user) {
    return <AuthScreen onLogin={handleLogin} />;
  }

  if (currentView === 'gallery') {
    return (
      <Gallery
        projects={projects}
        currentUser={user}
        onNewProject={handleNewProject}
        onEditProject={handleEditProject}
        onDeleteProject={handleDeleteProject}
        onLogout={handleLogout}
      />
    );
  }

  return (
    <WebtoonsGraphEditor
      initialProject={currentProject}
      currentUser={user}
      isReadOnly={currentProject ? currentProject.authorId !== user.id : false}
      onSaveProject={handleSaveProject}
      onBackToGallery={handleBackToGallery}
    />
  );
}
