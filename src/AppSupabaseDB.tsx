import React, { useState, useEffect } from 'react';
import { Session, User } from '@supabase/supabase-js';
import WebtoonsGraphEditor from './WebtoonsGraphEditor';
import { LanguageProvider, useLanguage, LanguageSwitcher } from './LanguageContext';
import { TestSupabase } from './components/TestSupabase';
import { SupabaseAuth } from './components/SupabaseAuth';
import { authService } from './services/auth.service';
import { projectsService } from './services/projects.service';
import { storageService } from './services/storage.service';
import type { Profile, Project, Genre } from './lib/database.types';
import { ArrowLeft } from 'lucide-react';
import { supabase } from './lib/supabase';
import { getLocalizedGenreName } from './utils/genreTranslations';

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–µ–∫—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
interface ProjectWithData extends Project {
  nodes?: any;
  edges?: any;
  images?: any;
  author?: Profile;
  genre?: Genre;
  is_liked?: boolean;
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≥–∞–ª–µ—Ä–µ–∏ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑ –ë–î
function Gallery({ 
  currentUser,
  currentProfile,
  onNewProject,
  onEditProject,
  onDeleteProject,
  onLogout,
  onOpenAuthor,
  refreshKey
}: {
  currentUser: User;
  currentProfile: Profile | null;
  onNewProject: () => void;
  onEditProject: (project: ProjectWithData) => void;
  onDeleteProject: (projectId: string) => void;
  onLogout: () => void;
  onOpenAuthor: (username: string) => void;
  refreshKey?: number;
}) {
  const { t, language } = useLanguage();
  const [projects, setProjects] = useState<ProjectWithData[]>([]);
  const [genres, setGenres] = useState<Genre[]>([]);
  const [loading, setLoading] = useState(true);
  const [selectedGenre, setSelectedGenre] = useState<string | null>(null);
  const [sortBy, setSortBy] = useState<'created_at' | 'view_count' | 'like_count'>('created_at');

  useEffect(() => {
    loadData();
  }, [currentUser, selectedGenre, sortBy, refreshKey]);

  const loadData = async () => {
    setLoading(true);
    console.log('üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', currentUser.id);
    
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∂–∞–Ω—Ä—ã
      if (genres.length === 0) {
        const genresData = await projectsService.getGenres();
        console.log('üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∂–∞–Ω—Ä–æ–≤:', genresData.length);
        setGenres(genresData);
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã: —Å–≤–æ–∏ (–ª—é–±–æ–π –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏) + –ø—É–±–ª–∏—á–Ω—ã–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ
      const [mineRes, publicRes] = await Promise.all([
        projectsService.getProjects({
          userId: currentUser.id,
          genreId: selectedGenre || undefined,
          sortBy
        }),
        projectsService.getProjects({
          isPublic: true,
          genreId: selectedGenre || undefined,
          sortBy
        })
      ]);

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –±–µ–∑ –¥—É–±–ª–µ–π
      const combinedMap = new Map<string, any>();
      for (const p of mineRes.projects) combinedMap.set(p.id, p);
      for (const p of publicRes.projects) combinedMap.set(p.id, p);
      const projectsData = Array.from(combinedMap.values());
      console.log('üìÅ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤:', projectsData.length);

      // –î–ª—è –≥–∞–ª–µ—Ä–µ–∏ –Ω–µ —Ç—è–Ω–µ–º –≤–µ—Ä—Å–∏–∏ –∏ –≥—Ä–∞—Ñ ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞ (—É—Å–∫–æ—Ä–µ–Ω–∏–µ –∏ –º–µ–Ω—å—à–µ —Ç–∞–π–º–∞—É—Ç–æ–≤)
      const projectsWithData = projectsData.map((project: any) => ({
        ...project,
        nodes: {},
        edges: [],
        images: {}
      }));

      // –°—Ç—Ä–æ–≥–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ: —Å–≤–æ–∏ –∏–ª–∏ –ø—É–±–ª–∏—á–Ω—ã–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ
      const visible = projectsWithData.filter((p: any) => (
        p.user_id === currentUser.id || p.is_public
      ));

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–ª—é (–Ω–∞ —Å–ª—É—á–∞–π —Å–º–µ—à–µ–Ω–∏—è –Ω–∞–±–æ—Ä–æ–≤)
      const sorted = [...visible].sort((a: any, b: any) => {
        const aa = a[sortBy] || 0;
        const bb = b[sortBy] || 0;
        return bb - aa;
      });
      setProjects(sorted);
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', sorted.length);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    } finally {
      setLoading(false);
    }
  };

  // Realtime –ª–∞–π–∫–∏: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ likes –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–æ–≤
  useEffect(() => {
    if (!projects || projects.length === 0) return;
    // –ï–¥–∏–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏
    const channel = supabase
      .channel('realtime-likes-gallery')
      .on(
        'postgres_changes',
        { event: '*', schema: 'public', table: 'likes' },
        (payload: any) => {
          const affectedProjectId = (payload.new?.project_id) || (payload.old?.project_id);
          if (!affectedProjectId) return;
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –µ—Å—Ç—å –Ω–∞ —ç–∫—Ä–∞–Ω–µ
          const exists = projects.some(p => p.id === affectedProjectId);
          if (!exists) return;
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, —Ç.–∫. —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π –∞–ø–¥–µ–π—Ç
          const eventUserId = (payload.new?.user_id) || (payload.old?.user_id);
          if (eventUserId && currentUser && eventUserId === currentUser.id) return;

          setProjects(prev => prev.map(p => {
            if (p.id !== affectedProjectId) return p;
            if (payload.eventType === 'INSERT') {
              return { ...p, like_count: Math.max(0, (p.like_count || 0) + 1) } as any;
            }
            if (payload.eventType === 'DELETE') {
              return { ...p, like_count: Math.max(0, (p.like_count || 0) - 1) } as any;
            }
            return p;
          }));
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [projects.length, currentUser?.id]);

  // Realtime –ø—Ä–æ–µ–∫—Ç—ã: –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–Ω–∞–∑–≤–∞–Ω–∏–µ, –ø—Ä–µ–≤—å—é, –ø—É–±–ª–∏—á–Ω–æ—Å—Ç—å, —Å—á—ë—Ç—á–∏–∫–∏)
  useEffect(() => {
    if (!currentUser) return;
    const channel = supabase
      .channel('realtime-projects-gallery')
      .on(
        'postgres_changes',
        { event: 'UPDATE', schema: 'public', table: 'projects' },
        (payload: any) => {
          const projectId = (payload.new?.id) || (payload.old?.id);
          if (!projectId) return;
          setProjects(prev => {
            // –î–ª—è INSERT: –ø—Ä–æ–µ–∫—Ç –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –≤–∏–¥–∏–º—ã–º, –µ—Å–ª–∏ –ø—É–±–ª–∏—á–Ω—ã–π –∏–ª–∏ –Ω–∞—à
            const isOwn = payload.new?.user_id === currentUser.id;
            const isPublic = !!payload.new?.is_public;
            let next = [...prev];
            if (payload.eventType === 'DELETE') {
              next = next.filter(p => p.id !== projectId);
            } else if (payload.eventType === 'INSERT') {
              if (isOwn || isPublic) {
                const exists = next.some(p => p.id === projectId);
                if (!exists) next.push(payload.new);
              }
            } else if (payload.eventType === 'UPDATE') {
              const idx = next.findIndex(p => p.id === projectId);
              if (idx >= 0) {
                next[idx] = { ...next[idx], ...payload.new };
                // –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—Ç–∞–ª–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∏ –Ω–µ –Ω–∞—à–∞ ‚Äî —É–±—Ä–∞—Ç—å
                const nowOwn = payload.new.user_id === currentUser.id;
                const nowPublic = !!payload.new.is_public;
                if (!nowOwn && !nowPublic) {
                  next.splice(idx, 1);
                }
              } else {
                // –µ—Å–ª–∏ —Å—Ç–∞–ª–∞ –ø—É–±–ª–∏—á–Ω–æ–π ‚Äî –¥–æ–±–∞–≤–∏—Ç—å
                const nowOwn = payload.new.user_id === currentUser.id;
                const nowPublic = !!payload.new.is_public;
                if (nowOwn || nowPublic) next.push(payload.new);
              }
            }

            // –ü–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä –∂–∞–Ω—Ä–∞
            const sortField = sortBy;
            const sorted = [...next].sort((a: any, b: any) => (b[sortField] || 0) - (a[sortField] || 0));
            const filtered = selectedGenre ? sorted.filter(p => p.genre_id === selectedGenre) : sorted;
            return filtered as any;
          });
        }
      )
      .on(
        'postgres_changes',
        { event: 'INSERT', schema: 'public', table: 'projects' },
        (payload: any) => {
          const projectId = payload.new?.id;
          if (!projectId) return;
          setProjects(prev => {
            const isOwn = payload.new?.user_id === currentUser.id;
            const isPublic = !!payload.new?.is_public;
            if (!isOwn && !isPublic) return prev;
            if (prev.some(p => p.id === projectId)) return prev;
            const next = [...prev, payload.new];
            const sorted = [...next].sort((a: any, b: any) => (b[sortBy] || 0) - (a[sortBy] || 0));
            const filtered = selectedGenre ? sorted.filter(p => p.genre_id === selectedGenre) : sorted;
            return filtered as any;
          });
        }
      )
      .on(
        'postgres_changes',
        { event: 'DELETE', schema: 'public', table: 'projects' },
        (payload: any) => {
          const projectId = payload.old?.id;
          if (!projectId) return;
          setProjects(prev => prev.filter(p => p.id !== projectId));
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, [currentUser?.id, sortBy, selectedGenre]);

  return (
    <div className="min-h-screen bg-[#0b0b0c]">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
      <div className="bg-[#0b0b0c] border-b border-white/10">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div>
              <h1 className="text-2xl font-bold text-white">{t.gallery.title}</h1>
              <p className="text-sm text-white/60 mt-1">{t.gallery.subtitle}</p>
            </div>
            <div className="flex items-center gap-4">
              <LanguageSwitcher />
              <div className="flex items-center gap-2">
                {currentProfile?.avatar_url && (
                  <img 
                    src={currentProfile.avatar_url} 
                    alt={currentProfile.username}
                    className="w-8 h-8 rounded-full ring-2 ring-white/10"
                  />
                )}
                <span className="text-sm font-medium text-white/80">
                  {currentProfile?.username || currentUser.email}
                </span>
              </div>
              <button
                onClick={onLogout}
                className="px-3 py-1 text-sm text-white/70 hover:text-white bg-white/5 hover:bg-white/10 rounded border border-white/10"
              >
                {t.logout}
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≥–∞–ª–µ—Ä–µ–∏ */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
        <div className="mb-8 flex flex-col md:flex-row gap-3 items-start md:items-center justify-between">
          {genres.length > 0 && (
            <div className="flex gap-2 flex-wrap">
              <button
                onClick={() => setSelectedGenre(null)}
                className={`px-4 py-2 rounded-full text-sm font-medium transition-colors border ${!selectedGenre ? 'bg-white text-black border-white' : 'bg-white/5 text-white/80 border-white/10 hover:bg-white/10'}`}
              >
                {t.gallery.allGenres || (language === 'ru' ? '–í—Å–µ –∂–∞–Ω—Ä—ã' : language === 'uk' ? '–£—Å—ñ –∂–∞–Ω—Ä–∏' : 'All genres')}
              </button>
              {genres.map(genre => (
                <button
                  key={genre.id}
                  onClick={() => setSelectedGenre(genre.id)}
                  className={`px-4 py-2 rounded-full text-sm font-medium transition-colors border ${selectedGenre===genre.id ? 'bg-white text-black border-white' : 'bg-white/5 text-white/80 border-white/10 hover:bg-white/10'}`}
                  title={genre.name}
                >
                  <span className="mr-1">{genre.icon}</span>
                  {getLocalizedGenreName(genre.slug || genre.name, language)}
                </button>
              ))}
            </div>
          )}

          <div className="flex gap-2">
            <button onClick={() => setSortBy('created_at')} className={`px-3 py-2 rounded-lg border ${sortBy==='created_at' ? 'bg-white text-black border-white' : 'bg-white/5 text-white/80 border-white/10 hover:bg-white/10'}`}>{t.gallery.sort.newest}</button>
            <button onClick={() => setSortBy('view_count')} className={`px-3 py-2 rounded-lg border ${sortBy==='view_count' ? 'bg-white text-black border-white' : 'bg-white/5 text-white/80 border-white/10 hover:bg-white/10'}`}>{t.gallery.sort.views}</button>
            <button onClick={() => setSortBy('like_count')} className={`px-3 py-2 rounded-lg border ${sortBy==='like_count' ? 'bg-white text-black border-white' : 'bg-white/5 text-white/80 border-white/10 hover:bg-white/10'}`}>{t.gallery.sort.likes}</button>
          </div>
        </div>

        {/* –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –±–ª–æ–∫ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∂–∞–Ω—Ä–∞–º */}

        {/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ */}
        <button
          onClick={onNewProject}
          className="mb-6 w-full md:w-auto px-6 py-3 bg-white text-black rounded-lg hover:bg-gray-100 transition-colors flex items-center justify-center gap-2 border border-white"
          disabled={loading}
        >
          <span className="text-xl">‚ûï</span>
          <span>{t.gallery.createNew}</span>
        </button>

        {/* –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ */}
          {loading ? (
          <div className="flex justify-center py-12">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-white"></div>
          </div>
          ) : projects.length === 0 ? (
          <div className="text-center py-12">
              <p className="text-white/80 text-lg">{t.gallery.empty.title}</p>
              <p className="text-white/50 mt-2">{t.gallery.empty.subtitle}</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
            {projects.map((project) => (
              <div
                key={project.id}
                className="rounded-2xl overflow-hidden bg-white/5 border border-white/10 hover:border-white/20 hover:bg-white/10 transition-colors"
              >
                {/* –ü—Ä–µ–≤—å—é –ø—Ä–æ–µ–∫—Ç–∞ (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç) */}
                <div
                  className="aspect-[4/3] bg-black relative cursor-pointer"
                  onClick={() => {
                    if (project.user_id === currentUser.id) {
                      onEditProject(project);
                    } else {
                      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ —É–≤–µ–ª–∏—á–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ UI
                      setProjects(prev => prev.map(p => p.id === project.id ? { ...p, view_count: (p.view_count || 0) + 1 } : p));
                      onEditProject(project);
                    }
                  }}
                  role="button"
                  aria-label={`${t.gallery.viewProject}: ${project.title}`}
                  tabIndex={0}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter' || e.key === ' ') {
                      e.preventDefault();
                      if (project.user_id === currentUser.id) {
                        onEditProject(project);
                      } else {
                        setProjects(prev => prev.map(p => p.id === project.id ? { ...p, view_count: (p.view_count || 0) + 1 } : p));
                        onEditProject(project);
                      }
                    }
                  }}
                >
                  {project.thumbnail_url ? (
                    <img
                      src={project.thumbnail_url}
                      alt={project.title}
                      loading="lazy"
                      className="w-full h-full object-cover"
                    />
                  ) : (
                    <div className="flex items-center justify-center h-full text-white/20">
                      <span className="text-5xl">üìö</span>
                    </div>
                  )}
                  {project.genre && (
                    <div className="absolute top-3 left-3 px-2.5 py-1.5 rounded-full text-white text-xs font-medium bg-black/50 border border-white/10">
                      {project.genre.icon} {getLocalizedGenreName(project.genre.slug || project.genre.name, language)}
                    </div>
                  )}
                </div>

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ */}
                <div className="p-4">
                  <h3 className="font-semibold text-white truncate text-lg">{project.title}</h3>
                  <p className="text-sm text-white/70 mt-1 line-clamp-2">
                    {project.description || t.editor.comicDescription}
                  </p>
                  <div className="mt-4 flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      {project.author?.avatar_url && (
                        <img src={project.author.avatar_url} alt={project.author.username} className="w-6 h-6 rounded-full ring-1 ring-white/20" />
                      )}
                      <button onClick={() => project.author?.username && onOpenAuthor(project.author.username)} className="text-sm text-white/70 hover:text-white">
                        {project.author?.username}
                      </button>
                    </div>
                    <div className="flex gap-3 text-sm text-white/70">
                      <span>üëÅ {project.view_count}</span>
                      <span>üí¨ {project.comment_count || 0}</span>
                      <button
                        onClick={async (e) => {
                          e.preventDefault();
                          try {
                            const { liked, likeCount } = await projectsService.toggleLike(project.id);
                            setProjects(prev => prev.map(p => {
                              if (p.id !== project.id) return p;
                              const fallback = (p.like_count || 0) + (liked ? 1 : -1);
                              const next = typeof likeCount === 'number' ? likeCount : fallback;
                              return { ...p, is_liked: liked, like_count: Math.max(0, next) };
                            }));
                          } catch (err) {
                            console.error(err);
                          }
                        }}
                        className={`hover:text-white transition-colors ${project as any && (project as any).is_liked ? 'text-red-400' : ''}`}
                        title={(project as any)?.is_liked ? '–£–±—Ä–∞—Ç—å –ª–∞–π–∫' : '–ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫'}
                      >
                        ‚ù§Ô∏è {project.like_count}
                      </button>
                    </div>
                  </div>

                  {/* –î–µ–π—Å—Ç–≤–∏—è */}
                  <div className="mt-4 flex gap-2">
                    {project.user_id === currentUser.id ? (
                      <>
                        <button
                          onClick={() => onEditProject(project)}
                          className="flex-1 px-3 py-2 bg-white text-black text-sm rounded-lg hover:bg-gray-100 transition-colors"
                        >
                          {t.gallery.editProject}
                        </button>
                        <button
                          onClick={() => {
                        if (window.confirm(t.gallery.deleteConfirm)) {
                              onDeleteProject(project.id);
                            }
                          }}
                          className="px-3 py-2 bg-white/5 text-white text-sm rounded-lg hover:bg-white/10 transition-colors border border-white/10"
                        >
                          {t.gallery.deleteProject}
                        </button>
                      </>
                    ) : (
                      <button
                        onClick={() => {
                          // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ —É–≤–µ–ª–∏—á–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ UI
                          setProjects(prev => prev.map(p => p.id === project.id ? { ...p, view_count: (p.view_count || 0) + 1 } : p));
                          onEditProject(project);
                        }}
                        className="flex-1 px-3 py-2 bg-white text-black text-sm rounded-lg hover:bg-gray-100 transition-colors"
                      >
                        {t.gallery.viewProject}
                      </button>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Supabase
function AppContent() {
  const { t } = useLanguage();
  const [session, setSession] = useState<Session | null>(null);
  const [profile, setProfile] = useState<Profile | null>(null);
  const [loading, setLoading] = useState(true);
  const [currentView, setCurrentView] = useState<'gallery' | 'editor' | 'author'>('gallery');
  const [currentProject, setCurrentProject] = useState<ProjectWithData | null>(null);
  const [authorUsername, setAuthorUsername] = useState<string | null>(null);
  const [galleryRefreshKey, setGalleryRefreshKey] = useState(0);
  const saveInProgressRef = React.useRef(false);
  const queuedSaveRef = React.useRef<any | null>(null);
  const [suppressAutoSave, setSuppressAutoSave] = useState(false);

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
    authService.getSession().then(session => {
      setSession(session);
      if (session?.user) {
        loadProfile(session.user);
      }
      setLoading(false);
    });

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const {
      data: { subscription },
    } = authService.onAuthStateChange((_event, session) => {
      setSession(session);
      if (session?.user) {
        loadProfile(session.user);
      } else {
        setProfile(null);
      }
    });

    return () => subscription.unsubscribe();
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const loadProfile = async (user: User) => {
    const userProfile = await authService.ensureProfile(user);
    setProfile(userProfile);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
  const handleNewProject = async () => {
    if (!session?.user || !profile) {
      console.error('‚ùå –ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞');
      return;
    }

    console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', session.user.id);

    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∂–∞–Ω—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const genres = await projectsService.getGenres();
      const defaultGenre = genres[0];
      console.log('üìö –ñ–∞–Ω—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', defaultGenre?.name);

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –≤ –ë–î
      const newProject = await projectsService.createProject({
        title: t.editor.newComic || '–ù–æ–≤—ã–π –∫–æ–º–∏–∫—Å',
        description: t.editor.comicDescription || '',
        genre_id: defaultGenre?.id,
        nodes: {},
        edges: [],
        images: {},
        is_public: false,
        is_published: false
      });

      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω:', newProject?.id);

      if (newProject) {
        setCurrentProject({
          ...newProject,
          nodes: {},
          edges: [],
          images: {},
          author: profile,
          genre: defaultGenre
        });
        setCurrentView('editor');
      } else {
        console.error('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error);
      alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ' + (error as any).message);
    }
  };

  const handleEditProject = async (project: ProjectWithData) => {
    console.log('üìù –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', project.id);
    setSuppressAutoSave(false);
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º UI —Å –ë–î
    try {
      const newCount = await projectsService.incrementViewCount(project.id);
      // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–∞–ª–µ—Ä–µ–∏ –∑–¥–µ—Å—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —Å–ø–∏—Å–æ–∫ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤—ã—à–µ; –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ setProjects
    } catch (e) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä—ã:', e);
    }
    
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ (–ø—Ä–æ–µ–∫—Ç + –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è)
      const fullProject = await projectsService.getProject(project.id);
    if (fullProject) {
      const latestVersion = await projectsService.getLatestVersion(project.id);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ nodes
      const images: any = {};
        const nodes = latestVersion?.nodes ? JSON.parse(JSON.stringify(latestVersion.nodes)) : {};
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å URL (_imageUrls)
      if (nodes._imageUrls) {
        Object.entries(nodes._imageUrls).forEach(([key, url]: [string, any]) => {
          // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
          images[key] = {
            id: key,
            name: key,
            src: url,
            originalName: 'image.png'
          };
        });
        delete nodes._imageUrls;
        console.log('üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ _imageUrls:', Object.keys(images).length);
      }
      // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (_images)
      else if (nodes._images) {
        Object.entries(nodes._images).forEach(([key, data]: [string, any]) => {
          if (typeof data === 'string') {
            images[key] = {
              id: key,
              name: key,
              src: data,
              originalName: 'image.png'
            };
          } else {
            images[key] = data;
          }
        });
        delete nodes._images;
        console.log('üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ _images (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç):', Object.keys(images).length);
      }
      
      // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º imageUrl/imageData –≤ —É–∑–ª–∞—Ö –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–ª—è imageId/backgroundImage
      Object.keys(nodes).forEach(nodeId => {
        const node = nodes[nodeId];
        if (node?.data?.backgroundImage) {
          const imageId = node.data.backgroundImage;
          // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç URL –Ω–∞–¥ base64
          if (node.data.imageUrl && !images[imageId]) {
            images[imageId] = {
              id: imageId,
              name: imageId,
              src: node.data.imageUrl,
              originalName: 'image.png'
            };
            console.log(`üì∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${imageId} –∏–∑ —É–∑–ª–∞ ${nodeId}`);
          } else if (node.data.imageData && !images[imageId]) {
            images[imageId] = {
              id: imageId,
              name: imageId,
              src: node.data.imageData,
              originalName: 'image.png'
            };
            console.log(`üì∏ Base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${imageId} –∏–∑ —É–∑–ª–∞ ${nodeId} (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)`);
          }
          // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: –µ—Å–ª–∏ –Ω–µ—Ç imageId, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º backgroundImage; –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
          if (!node.data.imageId) node.data.imageId = imageId;
          if (!node.data.backgroundImage && node.data.imageId) node.data.backgroundImage = node.data.imageId;
        }
      });

      // 3) –î–æ–ø–æ–ª–Ω—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–ø–∏—Å—è–º–∏ –∏–∑ –ë–î, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞ –≥—Ä–∞—Ñ–µ
      try {
        const dbImages = await storageService.getProjectImages(project.id);
        if (dbImages && dbImages.length > 0) {
          dbImages.forEach((img: any) => {
            const filePath: string = img.file_path || '';
            const fileName: string = img.file_name || '';
            const fileUrl: string = img.file_url || '';
            const baseName = (filePath.split('/').pop() || fileName || '').split('.')[0] || `img_${img.id}`;
            if (!images[baseName]) {
              images[baseName] = {
                id: baseName,
                name: (fileName || baseName).replace(/\.[^/.]+$/, ''),
                src: fileUrl,
                originalName: fileName || `${baseName}.png`
              };
            }
          });
          console.log('üìö –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ë–î (–≤–∫–ª—é—á–∞—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ):', dbImages.length);
        }
      } catch (e) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –ë–î:', e);
      }
      
      console.log('üì∏ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:', {
        projectId: project.id,
        imagesCount: Object.keys(images).length,
        imageIds: Object.keys(images),
        nodesCount: Object.keys(nodes).filter(k => k !== '_images').length,
        nodeIds: Object.keys(nodes).filter(k => k !== '_images')
      });
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞
      Object.keys(nodes).forEach(nodeId => {
        if (nodeId === '_images' || nodeId === '_imageUrls') return;
        const node = nodes[nodeId];
        console.log(`  –£–∑–µ–ª ${nodeId}:`, {
          hasBackgroundImage: !!node?.data?.backgroundImage,
          hasImageUrl: !!node?.data?.imageUrl,
          hasImageData: !!node?.data?.imageData,
          imageId: node?.data?.backgroundImage,
          imageType: node?.data?.imageUrl ? 'URL' : node?.data?.imageData ? 'base64' : 'none',
          imageExtracted: node?.data?.backgroundImage ? !!images[node.data.backgroundImage] : false
        });
      });
      
       setCurrentProject({
        ...fullProject,
        nodes: nodes,
        edges: latestVersion?.edges || [],
        images: images
      });
      setCurrentView('editor');
    }
  };

  const handleDeleteProject = async (projectId: string) => {
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç:', projectId);
    const success = await projectsService.deleteProject(projectId);
    if (success) {
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω');
      // –û–±–Ω–æ–≤–ª—è–µ–º –≥–∞–ª–µ—Ä–µ—é
      setGalleryRefreshKey(prev => prev + 1); // –¢—Ä–∏–≥–≥–µ—Ä–∏–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –≥–∞–ª–µ—Ä–µ–∏
      setCurrentView('gallery');
    } else {
      alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞');
    }
  };

  const handleSaveProject = async (updatedData: any) => {
    if (!currentProject) {
      console.error('‚ùå –ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      return;
    }
    // –ó–∞—â–∏—Ç–∞: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–≤—Ç–æ—Ä
    if (!session?.user || currentProject.user_id !== session.user.id) {
      console.warn('üö´ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –Ω–µ-–∞–≤—Ç–æ—Ä–æ–º ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã');
      return;
    }

    // –ê–Ω—Ç–∏–¥—Ä–µ–±–µ–∑–≥/–æ—á–µ—Ä–µ–¥—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –±–∏—Ç—å –ë–î –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
    if (saveInProgressRef.current && !updatedData.onlyMeta) {
      queuedSaveRef.current = { ...updatedData };
      return;
    }
    saveInProgressRef.current = true;

    // –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –Ω–æ–¥—ã
    const nodesToSave = updatedData.nodes || {};
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞ –≥—Ä–∞—Ñ–µ
    const usedImages = new Set<string>();
    Object.values(nodesToSave).forEach((node: any) => {
      if (node?.data?.backgroundImage) {
        usedImages.add(node.data.backgroundImage);
      }
    });
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ base64 —Å—Ç—Ä–æ–∫–∏, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    const rawImages = updatedData.images || {};
    const imagesToSave: any = {};
    Object.entries(rawImages).forEach(([key, value]: [string, any]) => {
      if (!usedImages.has(key)) return; // –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ
      if (typeof value === 'object' && value.src) {
        imagesToSave[key] = value.src;
        console.log(`üì∏ –ò–∑–≤–ª–µ—á–µ–Ω base64 –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è ${key}`);
      } else if (typeof value === 'string') {
        imagesToSave[key] = value;
      } else {
        console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${key}:`, typeof value);
      }
    });
    
    console.log('üìù –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ç:', {
      id: currentProject.id,
      title: updatedData.title || currentProject.title,
      hasNodes: !!updatedData.nodes,
      nodesCount: Object.keys(nodesToSave).length,
      nodeIds: Object.keys(nodesToSave),
      hasEdges: !!updatedData.edges,
      edgesCount: (updatedData.edges || []).length,
      hasImages: !!updatedData.images,
      imagesCount: Object.keys(imagesToSave).length,
      imageIds: Object.keys(imagesToSave),
      imageFormats: Object.entries(rawImages).map(([k, v]) => `${k}: ${typeof v}`)
    });
    
    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    console.log(`üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:`, {
      –∑–∞–≥—Ä—É–∂–µ–Ω–æ: Object.keys(imagesToSave).length,
      –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: usedImages.size,
      –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ: Array.from(usedImages)
    });

    try {
      let updatedProject: any = null;
      // –ï—Å–ª–∏ –º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–ø—É–±–ª–∏–∫–∞—Ü–∏—è), –Ω–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é ‚Äî –±—ã—Å—Ç—Ä—ã–π –∞–ø–¥–µ–π—Ç
      if (updatedData.onlyMeta) {
        updatedProject = await projectsService.updateProject(
          currentProject.id,
          {
            // –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –±–µ–∑ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
            title: typeof updatedData.title !== 'undefined' ? updatedData.title : currentProject.title,
            description: typeof updatedData.description !== 'undefined' ? updatedData.description : currentProject.description,
            thumbnail_url: typeof updatedData.thumbnail === 'string' ? updatedData.thumbnail : currentProject.thumbnail_url,
            is_public: typeof updatedData.isPublic === 'boolean' ? updatedData.isPublic : currentProject.is_public,
            genre_id: typeof updatedData.genre_id !== 'undefined' ? updatedData.genre_id : (currentProject as any)?.genre_id
          }
        );
        // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞, —á—Ç–æ–±—ã UI –Ω–µ –∑–∞–ª–∏–ø–∞–ª
        if (typeof updatedData.isPublic === 'boolean') {
          setCurrentProject(prev => prev ? ({ ...prev, is_public: updatedData.isPublic }) as any : prev);
        }
        // –°—Ç—Ä–∞—Ö–æ–≤–∫–∞: –µ—Å–ª–∏ —É –ø—Ä–æ–µ–∫—Ç–∞ –µ—â—ë –Ω–µ—Ç –≤–µ—Ä—Å–∏–π, —Å–æ–∑–¥–∞–¥–∏–º –ø–µ—Ä–≤—É—é –≤–µ—Ä—Å–∏—é –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        try {
          const existing = await projectsService.getLatestVersion(currentProject.id);
          if (!existing) {
            await projectsService.saveProjectVersion(
              currentProject.id,
              currentProject.nodes || {},
              (currentProject.edges as any) || [],
              currentProject.images || {}
            );
          }
        } catch (e) {
          console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –≤–µ—Ä—Å–∏—é –ø–æ—Å–ª–µ –º–µ—Ç–∞-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', e);
        }
      } else {
        // –ü–æ–ª–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –≤–µ—Ä—Å–∏–µ–π
        if (typeof updatedData.thumbnail === 'string') {
          console.log('[thumbnail] update payload:', {
            thumbnail_url: updatedData.thumbnail
          });
        }
        updatedProject = await projectsService.updateProject(
          currentProject.id,
          {
            title: typeof updatedData.title !== 'undefined' ? updatedData.title : currentProject.title,
            description: typeof updatedData.description !== 'undefined' ? updatedData.description : currentProject.description,
            // –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª –ø—É—Å—Ç–æ–π string, —è–≤–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é; –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            // –ï—Å–ª–∏ –Ω–æ–≤–æ–µ –ø—Ä–µ–≤—å—é –ø—Ä–∏—à–ª–æ ‚Äî –ø–∏—à–µ–º –µ–≥–æ; –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ
            thumbnail_url: typeof updatedData.thumbnail === 'string' ? updatedData.thumbnail : currentProject.thumbnail_url,
            // –∂–∞–Ω—Ä –ø—Ä–æ–µ–∫—Ç–∞
            genre_id: typeof updatedData.genre_id !== 'undefined' ? updatedData.genre_id : (currentProject as any)?.genre_id
          },
          {
            nodes: nodesToSave,
            edges: updatedData.edges || [],
            images: imagesToSave
          }
        );
      }

      if (updatedProject) {
        if (typeof updatedData.thumbnail === 'string') {
          console.log('[thumbnail] project updated:', updatedProject.thumbnail_url);
        }
        // –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é, —á—Ç–æ–±—ã –ø–æ–¥—Ç—è–Ω—É—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–º–µ—Å—Ç–æ base64
        // –ï—Å–ª–∏ –º–µ–Ω—è–ª–∏ –ø—Ä–µ–≤—å—é (meta-only), –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –≤–µ—Ä—Å–∏–∏, –Ω–æ –æ—Å–≤–µ–∂–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ nodes –∏–∑ –ë–î, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –¥—Ä–µ–π—Ñ
        const latest = !updatedData.onlyMeta ? await projectsService.getLatestVersion(currentProject.id) : await projectsService.getLatestVersion(currentProject.id);
        let nextImages = updatedData.images || {};
        let nextNodes = updatedData.nodes || {};
        if (latest?.nodes && latest.nodes._imageUrls) {
          const urlMap = latest.nodes._imageUrls as Record<string, string>;
          // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π URL-–∞–º–∏
          nextImages = Object.fromEntries(
            Object.keys(nextImages).map((key) => {
              const existing = nextImages[key];
              const url = urlMap[key];
              if (url) {
                return [key, { ...existing, src: url }];
              }
              return [key, existing];
            })
          );
          // –¢–∞–∫–∂–µ –≤—Å—Ç–∞–≤–∏–º URL –≤ –Ω–æ–¥—ã (imageUrl)
          nextNodes = JSON.parse(JSON.stringify(nextNodes));
          Object.keys(nextNodes).forEach((nodeId) => {
            const node = nextNodes[nodeId];
            if (node?.data?.backgroundImage) {
              const imgId = node.data.backgroundImage;
              if (urlMap[imgId]) {
                if (!node.data) node.data = {};
                node.data.imageUrl = urlMap[imgId];
                delete node.data.imageData;
              }
            }
          });
        }

        setCurrentProject({
          ...currentProject,
          ...updatedProject,
           nodes: (latest?.nodes ? latest.nodes : (updatedData.onlyMeta ? currentProject.nodes : nextNodes)),
           edges: (latest?.edges ? latest.edges : (updatedData.onlyMeta ? currentProject.edges : (updatedData.edges || []))),
           images: (updatedData.onlyMeta ? currentProject.images : nextImages)
        });

        console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î:', updatedProject.id);
      } else {
        console.error('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error);
      // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏; –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
    }
    finally {
      saveInProgressRef.current = false;
      if (queuedSaveRef.current) {
        const next = queuedSaveRef.current;
        queuedSaveRef.current = null;
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –º–∏–∫—Ä–æ‚Äë–ø–∞—É–∑—ã
        setTimeout(() => handleSaveProject(next), 50);
      }
    }
  };

  const handleBackToGallery = async () => {
    console.log('üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–∞–ª–µ—Ä–µ—é');
    setSuppressAutoSave(true); // –±–ª–æ–∫–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∞–≤—Ç–æ—Å–µ–π–≤—ã –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    // –î–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —Ç–µ–∫—É—â–µ–º—É/–æ—á–µ—Ä–µ–¥–Ω–æ–º—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é (–¥–æ 8 —Å–µ–∫—É–Ω–¥)
    const start = Date.now();
    const MAX_WAIT_MS = 8000;
    while ((saveInProgressRef.current || queuedSaveRef.current) && Date.now() - start < MAX_WAIT_MS) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –∑–∞–ø—É—Å—Ç–∏–º –µ–≥–æ –≤—Ä—É—á–Ω—É—é
      if (!saveInProgressRef.current && queuedSaveRef.current) {
        const next = queuedSaveRef.current;
        queuedSaveRef.current = null;
        await new Promise((r) => setTimeout(r, 10));
        await (async () => {
          try {
            await handleSaveProject(next);
          } catch {}
        })();
      }
      await new Promise((r) => setTimeout(r, 50));
    }
    setCurrentProject(null);
    setGalleryRefreshKey(prev => prev + 1);
    setCurrentView('gallery');
  };

  const handleLogout = async () => {
    await authService.signOut();
    setSession(null);
    setProfile(null);
    setCurrentView('gallery');
  };

  // –í–†–ï–ú–ï–ù–ù–û: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
  const testSupabase = false;
  if (testSupabase) {
    return <TestSupabase />;
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">{t.loading}</p>
        </div>
      </div>
    );
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (!session) {
    return <SupabaseAuth onSuccess={() => {
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –ø–æ–¥–ø–∏—Å–∫—É
    }} />;
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–∞–ª–µ—Ä–µ–∏ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
  if (currentView === 'gallery') {
    return (
      <Gallery
        currentUser={session.user}
        currentProfile={profile}
        onNewProject={handleNewProject}
        onEditProject={handleEditProject}
        onDeleteProject={handleDeleteProject}
        onLogout={handleLogout}
        onOpenAuthor={(username) => { setAuthorUsername(username); setCurrentView('author'); }}
        refreshKey={galleryRefreshKey}
      />
    );
  }

  if (currentView === 'author' && authorUsername) {
    return (
      <AuthorPage username={authorUsername} onBack={() => setCurrentView('gallery')} />
    );
  }

  // –†–µ–¥–∞–∫—Ç–æ—Ä
  return (
    <WebtoonsGraphEditor
      initialProject={currentProject ? ({
        id: currentProject.id,
        title: currentProject.title,
        description: currentProject.description || '',
          thumbnail: currentProject.thumbnail_url || '',
        nodes: currentProject.nodes || {},
        edges: currentProject.edges || [],
        images: currentProject.images || {},
        authorId: currentProject.user_id,
        authorName: currentProject.author?.username || 'Unknown',
        // –ø–µ—Ä–µ–¥–∞—ë–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∏ –∂–∞–Ω—Ä –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        is_public: (currentProject as any)?.is_public,
        is_published: (currentProject as any)?.is_published,
        genre_id: (currentProject as any)?.genre_id
      } as any) : null}
      currentUser={{
        id: session.user.id,
        username: profile?.username || session.user.email || 'User'
      }}
      isReadOnly={currentProject?.user_id !== session.user.id}
      suppressSave={currentProject?.user_id !== session.user.id || suppressAutoSave}
      initialMode={currentProject?.user_id !== session.user.id ? 'viewer' : 'constructor'}
      onSaveProject={handleSaveProject}
      onBackToGallery={handleBackToGallery}
    />
  );
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º —è–∑—ã–∫–∞
export default function AppSupabaseDB() {
  return (
    <LanguageProvider>
      <AppContent />
    </LanguageProvider>
  );
}

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∞ (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function AuthorPage({ username, onBack }: { username: string; onBack: () => void }) {
  const { t } = useLanguage();
  const [loading, setLoading] = React.useState(true);
  const [author, setAuthor] = React.useState<Profile | null>(null);
  const [projects, setProjects] = React.useState<any[]>([]);
  const [currentUserId, setCurrentUserId] = React.useState<string | null>(null);

  React.useEffect(() => {
    const load = async () => {
      setLoading(true);
      try {
        // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ—Ä–∞
        const { data: profiles } = await supabase
          .from('profiles')
          .select('*')
          .eq('username', username)
          .limit(1);
        const profile = profiles && profiles[0];
        setAuthor(profile || null);

        if (profile) {
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –∞–≤—Ç–æ—Ä–∞
          const { projects: authorProjects } = await projectsService.getProjects({
            userId: profile.id,
            isPublic: true,
            isPublished: true,
            sortBy: 'created_at'
          });
          setProjects(authorProjects);
        }
      } catch (e) {
        console.error(e);
      } finally {
        setLoading(false);
      }
    };
    load();
  }, [username]);

  // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤ realtime)
  React.useEffect(() => {
    supabase.auth.getUser().then(({ data }) => {
      setCurrentUserId(data.user?.id || null);
    }).catch(() => setCurrentUserId(null));
  }, []);

  // Realtime –ª–∞–π–∫–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ—Ä–∞
  React.useEffect(() => {
    if (!projects || projects.length === 0) return;
    const channel = supabase
      .channel('realtime-likes-author')
      .on(
        'postgres_changes',
        { event: '*', schema: 'public', table: 'likes' },
        (payload: any) => {
          const affectedProjectId = (payload.new?.project_id) || (payload.old?.project_id);
          if (!affectedProjectId) return;
          const exists = projects.some(p => p.id === affectedProjectId);
          if (!exists) return;
          const eventUserId = (payload.new?.user_id) || (payload.old?.user_id);
          if (eventUserId && currentUserId && eventUserId === currentUserId) return;

          setProjects(prev => prev.map(p => {
            if (p.id !== affectedProjectId) return p;
            if (payload.eventType === 'INSERT') {
              return { ...p, like_count: Math.max(0, (p.like_count || 0) + 1) };
            }
            if (payload.eventType === 'DELETE') {
              return { ...p, like_count: Math.max(0, (p.like_count || 0) - 1) };
            }
            return p;
          }));
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, [projects.length, currentUserId]);

  return (
    <div className="min-h-screen bg-[#0b0b0c]">
      <div className="max-w-6xl mx-auto px-4 py-6">
        <button onClick={onBack} className="text-white/80 hover:text-white flex items-center gap-2">
          <ArrowLeft size={16} /> {t.back}
        </button>

        <div className="mt-6 flex items-center gap-4">
          {author?.avatar_url && <img src={author.avatar_url} className="w-16 h-16 rounded-full ring-2 ring-white/10" />}
          <div>
            <h1 className="text-2xl font-bold text-white">{author?.username || username}</h1>
            <div className="text-white/60 text-sm">
              –ö–æ–º–∏–∫—Å–æ–≤: {author?.total_projects ?? 0} ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {author?.total_views ?? 0} ‚Ä¢ –õ–∞–π–∫–æ–≤: {author?.total_likes ?? 0}
            </div>
          </div>
        </div>

        <div className="mt-8 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {loading ? (
            <div className="text-white/60">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
          ) : (
            projects.map((p) => (
              <div key={p.id} className="rounded-2xl overflow-hidden bg-white/5 border border-white/10">
                <div className="aspect-[4/3] bg-black">
                  {p.thumbnail_url ? (
                    <img src={p.thumbnail_url} alt={p.title} className="w-full h-full object-cover" loading="lazy" />
                  ) : (
                    <div className="w-full h-full flex items-center justify-center text-white/20">üìö</div>
                  )}
                </div>
                <div className="p-4">
                  <h3 className="text-white font-semibold truncate">{p.title}</h3>
                  <div className="mt-2 flex gap-4 text-white/70 text-sm">
                    <span>üëÅ {p.view_count}</span>
                    <span>‚ù§Ô∏è {p.like_count}</span>
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );
}
