import { supabase } from '../lib/supabase';
import type { Image, ImageInsert } from '../lib/database.types';
import { authService } from './auth.service';

interface UploadResult {
  url: string;
  path: string;
  error?: string;
}

class StorageService {
  private readonly BUCKET_NAMES = {
    PROJECT_IMAGES: 'project-images',
    AVATARS: 'avatars',
    THUMBNAILS: 'thumbnails'
  };

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
   */
  async uploadProjectImage(
    projectId: string,
    file: File,
    imageId?: string
  ): Promise<UploadResult> {
    try {
      const user = await authService.getCurrentUser();
      if (!user) {
        console.error('‚ùå User not authenticated for upload');
        throw new Error('User not authenticated');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
      const fileExt = file.name.split('.').pop();
      const fileName = imageId || `${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;
      const filePath = `${user.id}/${projectId}/${fileName}.${fileExt}`;

      console.log(`üì§ Attempting to upload to Storage:`, {
        bucket: this.BUCKET_NAMES.PROJECT_IMAGES,
        filePath,
        fileSize: file.size,
        fileType: file.type
      });

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Storage
      const { data, error } = await supabase.storage
        .from(this.BUCKET_NAMES.PROJECT_IMAGES)
        .upload(filePath, file, {
          cacheControl: '3600',
          upsert: true
        });

      if (error) {
        console.error('‚ùå Storage upload error:', error);
        throw error;
      }

      console.log(`‚úÖ File uploaded successfully:`, data);

      // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
      const { data: { publicUrl } } = supabase.storage
        .from(this.BUCKET_NAMES.PROJECT_IMAGES)
        .getPublicUrl(data.path);

      console.log(`üìé Public URL generated:`, publicUrl);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤ –ë–î
      await this.saveImageRecord(projectId, {
        file_path: data.path,
        file_url: publicUrl,
        file_name: file.name,
        file_size: file.size
      });

      return {
        url: publicUrl,
        path: data.path
      };
    } catch (error: any) {
      console.error('UploadProjectImage error:', error);
      return {
        url: '',
        path: '',
        error: error.message
      };
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ thumbnail –ø—Ä–æ–µ–∫—Ç–∞
   */
  async uploadThumbnail(
    projectId: string,
    file: File
  ): Promise<UploadResult> {
    try {
      const user = await authService.getCurrentUser();
      if (!user) throw new Error('User not authenticated');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–≤—å—é —Å—Ä–∞–∑—É –≤ project-images (–ª–∏–º–∏—Ç –≤—ã—à–µ)
      const fileExt = (file.name.split('.').pop() || 'jpg').toLowerCase();
      const imagePath = `${user.id}/${projectId}/thumbnail.${fileExt}`;
      const { data, error } = await supabase.storage
        .from(this.BUCKET_NAMES.PROJECT_IMAGES)
        .upload(imagePath, file, {
          cacheControl: '3600',
          upsert: true,
          contentType: file.type || 'image/jpeg'
        });
      if (error) throw error;
      const { data: urlData } = supabase.storage
        .from(this.BUCKET_NAMES.PROJECT_IMAGES)
        .getPublicUrl(data.path);
      const publicUrl = urlData.publicUrl;
      const uploadedPath = data.path;

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–µ—Ä—Å–∏–∏, —á—Ç–æ–±—ã –æ–±—Ö–æ–¥–∏—Ç—å –∫—ç—à CDN/–±—Ä–∞—É–∑–µ—Ä–∞
      const versionedUrl = `${publicUrl}${publicUrl.includes('?') ? '&' : '?'}v=${Date.now()}`;

      // –û–±–Ω–æ–≤–ª—è–µ–º URL –≤ –ø—Ä–æ–µ–∫—Ç–µ (—Ç–æ–ª—å–∫–æ –ø—Ä–µ–≤—å—é, –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –≤–µ—Ä—Å–∏–∏)
      await supabase
        .from('projects')
        .update({ thumbnail_url: versionedUrl })
        .eq('id', projectId)
        .eq('user_id', user.id);

      return {
        url: versionedUrl,
        path: uploadedPath
      };
    } catch (error: any) {
      console.error('UploadThumbnail error:', error);
      return {
        url: '',
        path: '',
        error: error.message
      };
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async uploadAvatar(file: File): Promise<UploadResult> {
    try {
      const user = await authService.getCurrentUser();
      if (!user) throw new Error('User not authenticated');

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
      const fileExt = file.name.split('.').pop();
      const filePath = `${user.id}/avatar.${fileExt}`;

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Storage
      const { data, error } = await supabase.storage
        .from(this.BUCKET_NAMES.AVATARS)
        .upload(filePath, file, {
          cacheControl: '3600',
          upsert: true // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        });

      if (error) throw error;

      // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
      const { data: { publicUrl } } = supabase.storage
        .from(this.BUCKET_NAMES.AVATARS)
        .getPublicUrl(data.path);

      // –û–±–Ω–æ–≤–ª—è–µ–º URL –≤ –ø—Ä–æ—Ñ–∏–ª–µ
      await supabase
        .from('profiles')
        .update({ avatar_url: publicUrl })
        .eq('id', user.id);

      return {
        url: publicUrl,
        path: data.path
      };
    } catch (error: any) {
      console.error('UploadAvatar error:', error);
      return {
        url: '',
        path: '',
        error: error.message
      };
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ base64
   */
  async uploadBase64Image(
    projectId: string,
    base64Data: string,
    imageId: string,
    fileName: string = 'image.png'
  ): Promise<UploadResult> {
    try {
      console.log(`üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${imageId} –≤ Storage –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}`);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –≤ Blob
      const base64Response = await fetch(base64Data);
      const blob = await base64Response.blob();
      
      // –°–æ–∑–¥–∞–µ–º File –∏–∑ Blob
      const file = new File([blob], fileName, { type: blob.type });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
      const sizeMB = Math.round(file.size / 1024 / 1024 * 10) / 10;
      console.log(`üì¶ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${sizeMB} –ú–ë`);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º imageId
      const result = await this.uploadProjectImage(projectId, file, imageId);
      
      if (result.url) {
        console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${imageId} –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${result.url}`);
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${imageId}: ${result.error}`);
      }
      
      return result;
    } catch (error: any) {
      console.error('UploadBase64Image error:', error);
      return {
        url: '',
        path: '',
        error: error.message
      };
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  async deleteImage(bucket: string, path: string): Promise<boolean> {
    try {
      const user = await authService.getCurrentUser();
      if (!user) throw new Error('User not authenticated');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Ç—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (!path.startsWith(user.id)) {
        throw new Error('Unauthorized to delete this image');
      }

      const { error } = await supabase.storage
        .from(bucket)
        .remove([path]);

      if (error) throw error;

      // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î –µ—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
      if (bucket === this.BUCKET_NAMES.PROJECT_IMAGES) {
        await supabase
          .from('images')
          .delete()
          .eq('file_path', path);
      }

      return true;
    } catch (error: any) {
      console.error('DeleteImage error:', error);
      return false;
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–∞
   */
  async deleteProjectImages(projectId: string): Promise<void> {
    try {
      const user = await authService.getCurrentUser();
      if (!user) return;

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–∞
      const { data: images } = await supabase
        .from('images')
        .select('file_path')
        .eq('project_id', projectId);

      if (images && images.length > 0) {
        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ Storage
        const paths = images.map(img => img.file_path);
        await supabase.storage
          .from(this.BUCKET_NAMES.PROJECT_IMAGES)
          .remove(paths);
      }

      // –£–¥–∞–ª—è–µ–º thumbnail
      const folderPath = `${user.id}/${projectId}`;
      const { data: thumbnails } = await supabase.storage
        .from(this.BUCKET_NAMES.THUMBNAILS)
        .list(user.id, {
          search: projectId
        });

      if (thumbnails && thumbnails.length > 0) {
        const thumbnailPaths = thumbnails.map(t => `${user.id}/${t.name}`);
        await supabase.storage
          .from(this.BUCKET_NAMES.THUMBNAILS)
          .remove(thumbnailPaths);
      }
    } catch (error: any) {
      console.error('DeleteProjectImages error:', error);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤ –ë–î
   */
  private async saveImageRecord(
    projectId: string,
    imageData: Omit<ImageInsert, 'project_id'>
  ): Promise<void> {
    try {
      console.log(`üíæ Saving image record to DB:`, {
        projectId,
        ...imageData
      });
      
      const { error } = await supabase
        .from('images')
        .insert({
          project_id: projectId,
          ...imageData
        });

      if (error) {
        console.error('‚ùå Failed to save image record:', error);
        throw error;
      }
      
      console.log(`‚úÖ Image record saved to DB`);
    } catch (error: any) {
      console.error('SaveImageRecord error:', error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –ë–î
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–∞
   */
  async getProjectImages(projectId: string): Promise<Image[]> {
    try {
      const { data, error } = await supabase
        .from('images')
        .select('*')
        .eq('project_id', projectId)
        .order('created_at', { ascending: false });

      if (error) throw error;

      return data || [];
    } catch (error: any) {
      console.error('GetProjectImages error:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  async getImageDimensions(url: string): Promise<{ width: number; height: number } | null> {
    return new Promise((resolve) => {
      const img = new Image();
      img.onload = () => {
        resolve({ width: img.width, height: img.height });
      };
      img.onerror = () => {
        resolve(null);
      };
      img.src = url;
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
   */
  isValidImageType(file: File): boolean {
    const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
    return validTypes.includes(file.type);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10MB –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö GIF)
   */
  isValidFileSize(file: File, maxSizeMB: number = 10): boolean {
    const maxSize = maxSizeMB * 1024 * 1024; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã
    return file.size <= maxSize;
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
   */
  validateImage(file: File): { valid: boolean; error?: string } {
    if (!this.isValidImageType(file)) {
      return {
        valid: false,
        error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JPEG, PNG, GIF –∏–ª–∏ WebP.'
      };
    }

    if (!this.isValidFileSize(file)) {
      return {
        valid: false,
        error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 5MB.'
      };
    }

    return { valid: true };
  }
}

export const storageService = new StorageService();
